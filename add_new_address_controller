import 'dart:math';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:geolocator/geolocator.dart';
import 'package:geocoding/geocoding.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'addresses_controller.dart';

abstract class AddNewAddressController extends GetxController {
  late Position currentLocation;
  late List<Placemark> locationInfo;
  late bool services;
  late LocationPermission permission;
  String street = '';
  String state = '';
  String city = '';
  String type = 'home';
  int typeIndex = 1;
  late double lat;
  late double lng;
  late double cLat;
  late double cLng;
  late GoogleMapController googleMapController;
  var kGooglePlex;

  GlobalKey<FormState> formsState = GlobalKey<FormState>();
  late TextEditingController cityController;
  late TextEditingController locationController;
  late TextEditingController nameController;
  late TextEditingController phoneController;
  late TextEditingController stateController;
  late TextEditingController streetController;
  late TextEditingController titleController;

  saveAddress();

  getPermission();

  onMapTab(LatLng latLng);

  myCurrentLocation();

  getLatAndLng();

  setLocation();

  setType(int index);
}

class AddNewAddressControllerImp extends AddNewAddressController {
  @override
  saveAddress() async {
    int randomNumber = Random().nextInt(9999999) + 1000000;
    var formsData = formsState.currentState;
    if (formsData!.validate()) {
      var docId = titleController.text + randomNumber.toString();
      var userId = FirebaseAuth.instance.currentUser?.uid;
      var userCollection =
          FirebaseFirestore.instance.collection("users").doc(userId);
      await userCollection.collection("addresses").doc(docId).set({
        'title': titleController.text,
        'name': nameController.text,
        'phone': phoneController.text,
        'city': cityController.text,
        'state': stateController.text,
        'street': streetController.text,
        'location': [lat, lng],
        'type': type,
        'addressId': docId,
      });
      formsState.currentState?.reset();
      typeIndex = 1;
      AddressesControllerImp controller = Get.find();
      controller.getData();
      Get.back();
    }
  }

  @override
  void onInit() {
    cityController = TextEditingController();
    locationController = TextEditingController();
    nameController = TextEditingController();
    phoneController = TextEditingController();
    stateController = TextEditingController();
    titleController = TextEditingController();
    streetController = TextEditingController();
    getPermission();
    getLatAndLng();
    super.onInit();
  }

  @override
  void dispose() {
    cityController.dispose();
    locationController.dispose();
    nameController.dispose();
    phoneController.dispose();
    stateController.dispose();
    titleController.dispose();
    streetController.dispose();
    super.dispose();
  }
  
  @override
  getPermission() async {
    services = await Geolocator.isLocationServiceEnabled();
    if (services == false) {
      Get.snackbar("location", "Turn on location access",
          duration: const Duration(seconds: 5));
    }
    permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied ||
        permission == LocationPermission.deniedForever) {
      permission = await Geolocator.requestPermission();
    }
    if (permission == LocationPermission.always ||
        permission == LocationPermission.whileInUse) {
      currentLocation = await Geolocator.getCurrentPosition();
      lat = currentLocation.latitude;
      lng = currentLocation.longitude;
    }
  }

  @override
  Future<void> getLatAndLng() async {
    currentLocation =
        await Geolocator.getCurrentPosition().then((value) => value);
    lat = cLat = currentLocation.latitude;
    lng = cLng = currentLocation.longitude;
    kGooglePlex = CameraPosition(
      target: LatLng(lat, lng),
      zoom: 20,
    );
    myMarker.add(
      Marker(
        draggable: true,
        onDragEnd: (latLng) {
          lat = latLng.latitude;
          lng = latLng.longitude;
        },
        markerId: const MarkerId("1"),
        position: LatLng(lat, lng),
      ),
    );
    locationInfo = await placemarkFromCoordinates(lat, lng);
    street = locationInfo[0].subLocality!;
    state = locationInfo[0].subAdministrativeArea!;
    city = locationInfo[0].administrativeArea!;
    update();
  }

  @override
  myCurrentLocation() async {
    lat = cLat;
    lng = cLng;
    googleMapController
        .animateCamera(CameraUpdate.newCameraPosition(CameraPosition(
      target: LatLng(lat, lng),
      zoom: 20,
    )));
    myMarker.clear();
    myMarker.add(
      Marker(
        markerId: const MarkerId("1"),
        position: LatLng(lat, lng),
      ),
    );
    locationInfo = await placemarkFromCoordinates(lat, lng);
    street = locationInfo[0].subLocality!;
    state = locationInfo[0].subAdministrativeArea!;
    city = locationInfo[0].administrativeArea!;
    update();
  }

  Set<Marker> myMarker = {};

  @override
  onMapTab(LatLng latLng) async {
    myMarker.clear();
    myMarker.add(
      Marker(
          markerId: const MarkerId("1"),
          position: LatLng(latLng.latitude, latLng.longitude)),
    );
    lat = latLng.latitude;
    lng = latLng.longitude;
    locationInfo = await placemarkFromCoordinates(lat, lng);
    street = locationInfo[0].subLocality!;
    state = locationInfo[0].subAdministrativeArea!;
    city = locationInfo[0].administrativeArea!;
    update();
  }
  
  @override
  setLocation() {
    locationController.text = "$street, $state, $city";
    Get.back();
    update();
  }

  @override
  setType(int index) {
    typeIndex = index;
    if (index == 1) {
      type = 'home';
    } else if (index == 2) {
      type = 'work';
    } else if (index == 3) {
      type = 'company';
    } else if (index == 4) {
      type = 'factor';
    }
    update();
  }
}
